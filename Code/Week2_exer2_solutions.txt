# I will create a new dataset to clean, so I can preserve the old, dirty one
stone_tools_clean <- stone_tools


# standardize raw material names. 
# transform factors to characters first
stone_tools_clean$raw_material <- as.character(stone_tools_clean$raw_material)

# If the following is too busy, you can break up the code by assigning stone_tools_clean$raw_material to a different object first 
stone_tools_clean$raw_material[grep("bas", stone_tools_clean$raw_material, ignore.case = TRUE)] <- "basalt" 
stone_tools_clean$raw_material[grep("flint", stone_tools_clean$raw_material, ignore.case = TRUE)] <- "flint"
stone_tools_clean$raw_material[grep("quar", stone_tools_clean$raw_material, ignore.case = TRUE)] <- "quartz"
# chert is fine as is

# transform back into factors
stone_tools_clean$raw_material <- as.factor(stone_tools_clean$raw_material)


# Question 1a
nrow(stone_tools)

# Question 1b
length(unique(stone_tools_clean$raw_material))

# Question 1c
table(stone_tools_clean$raw_material)


# Now clean the length measurements by trimming the units off
# need to transform factors to characters first
stone_tools_clean$length <- as.character(stone_tools_clean$length)

# Again, if the following code is too busy, you can save stone_tools_clean$length to a new object first
length_trim <- substr(stone_tools_clean$length, 1, nchar(stone_tools_clean$length) - 3)

# save trimmed numbers to stone_tools_clean$length while transforming into numeric class
stone_tools_clean$length <- as.numeric(length_trim)

# there is one huge outlier (can be seen using a histogram, which we will cover next lecture)
hist(stone_tools_clean$length)

# we can extract the outlier length using max(), while setting na.rm=TRUE to remove NAs
# see the help file for max() if you don't know what it does
outlier_length <- max(stone_tools_clean$length, na.rm = TRUE)

# we can use grep to find this number in the original dataset to see what's going on (it was measured in mm, not cm)
stone_tools$length[grep(outlier_length , stone_tools$length)]

# transform back into cm
# again, if code is too busy, you can break it up by saving stone_tools_clean$length to a new object first
stone_tools_clean$length[which(stone_tools_clean$length == outlier_length)] <- outlier_length / 10 

# double-check to see if outlier is gone
hist(stone_tools_clean$length)

  
# Question 2a
mean(stone_tools_clean$length, na.rm = TRUE)

# Question 2b
mean(stone_tools_clean$length[stone_tools_clean$raw_material == "basalt"], na.rm = TRUE)
mean(stone_tools_clean$length[stone_tools_clean$raw_material == "chert"], na.rm = TRUE)
mean(stone_tools_clean$length[stone_tools_clean$raw_material == "flint"], na.rm = TRUE)
mean(stone_tools_clean$length[stone_tools_clean$raw_material == "quartz"], na.rm = TRUE)

# Here is a quicker way to answer Question 2b.
# remove NAs first
stone_tools_clean_noNA <- stone_tools_clean[complete.cases(stone_tools_clean), ]

# check to see if NAs were removed
sum(is.na(stone_tools_clean_noNA))

tapply(stone_tools_clean_noNA$length, stone_tools_clean_noNA$raw_material, mean)
# tapply() is a handy function that will apply a function (third argument) to groups of elements sharing the same factor level (second argument) inside a vector (first argument)

# if I wanted to use tapply() with NAs still in stone_tools_clean$length, I would need to do one extra step: define the function, so I can use the na.rm argument. This is something we'll cover in a future lecture. 
tapply(stone_tools_clean$length, stone_tools_clean$raw_material, function(x) mean(x, na.rm = TRUE))