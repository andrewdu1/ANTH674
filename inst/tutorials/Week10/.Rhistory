?t.test
mean(mtcars$mpg[mtcars$am == 1]) - mean(mtcars$mpg[mtcars$am == 0])
test=t.test(mtcars$mpg[mtcars$am == 0], mtcars$mpg[mtcars$am == 1], var.equal = TRUE)
test$statistic
test$parameter
test$conf.int
test$estimate
test$stderr
t.test(mtcars$mpg[mtcars$am == 0], mtcars$mpg[mtcars$am == 1], var.equal = TRUE)$stderr
wilcox.test(mtcars$mpg[mtcars$am == 0], mtcars$mpg[mtcars$am == 1])
?wilcox.test
lm(rank(mtcars$mpg)~mtcars$am)
summary(lm(rank(mtcars$mpg)~mtcars$am))
summary(lm(rank(mtcars$mpg)~mtcars$am))
wilcox.test(mtcars$mpg[mtcars$am == 0], mtcars$mpg[mtcars$am == 1])
aov.res <- aov(Petal.Length ~ Species, data = iris)
aov.res
anova(aov.res)
aov.res <- aov(Petal.Length ~ Species, data = iris)
anova(aov.res)
lm.res <- lm(Petal.Length ~ Species, data = iris)
summary(lm.res)
anova(aov.res)
anova(lm.res)
anova(aov.res)$P
anova(lm.res)$P
aov.res$coefficients
lm.res$coefficients
mean(iris$Petal.Length[iris$Species == "setosa"])
lm.res$coefficients["(Intercept)"]
(x)=8+8
x(=)8+8
(x=8+8)
(setosa.pl <- iris$Petal.Length[iris$Species == "setosa"])
(setosa.pl <- mean(iris$Petal.Length[iris$Species == "setosa"]))
(setosa.pl.mean <- mean(iris$Petal.Length[iris$Species == "setosa"]))
lm.res
lm.res$coefficients
mean(iris$Petal.Length[iris$Species == "versicolor"]) - setosa.pl.mean
lm.res$coefficients["Speciesversicolor"]
mean(iris$Petal.Length[iris$Species == "virginica"]) - setosa.pl.mean
lm.res$coefficients["Speciesvirginica"]
ancova.res <- lm(qsec ~ am + hp, data = mtcars)
ancova.res
summary(ancova.res)
?sleep
head(sleep)
table(sleep$group)
plot(am ~ wt, data = mtcars)
abline(lm(am ~ wt, data = mtcars))
hist(lm.res$residuals)
plot(am ~ wt, data = mtcars)
lm.res <- lm(am ~ wt, data = mtcars)
abline(lm.res)
hist(lm.res$residuals)
?glm
glm(am ~ wt, data = mtcars, family = binomial)
glm(am ~ wt, data = mtcars, family = "binomial")
glm.binom <- glm(am ~ wt, data = mtcars, family = binomial)
summary(glm.binom)
confint(glm.binom)
plot(am ~ wt, data = mtcars)
inv.logit <- function(x) return(exp(x) / (1 + exp(x)))
lines(seq(1, 6, length.out = 100), inv.logit(predict(glm.binom, data.frame(wt = seq(1, 6, length.out = 100)))))
plot(am ~ wt, data = mtcars)
lines(seq(1, 6, length.out = 100), predict(glm.binom, data.frame(wt = seq(1, 6, length.out = 100)), type = "response"))
plot(am ~ wt, data = mtcars)
x <- seq(1, 6, length.out = 100)
lines(x, predict(glm.binom, data.frame(wt = x), type = "response"))
?predict
?predict
plot(am ~ wt, data = mtcars)
x <- seq(1, 6, length.out = 100)
lines(x, predict(glm.binom, data.frame(wt = x), type = "response"))
summary(glm.binom)
exp(12.04)
# Data in long format
D = data.frame(mood = c('happy', 'sad', 'meh'),
counts = c(60, 90, 70))
# Dummy coding for the linear model
D$mood_happy = ifelse(D$mood == 'happy', 1, 0)
D$mood_sad = ifelse(D$mood == 'sad', 1, 0)
D
# Built-in test
a = chisq.test(D$counts)
# As log-linear model, comparing to an intercept-only model
full = glm(counts ~ 1 + mood_happy + mood_sad, data = D, family = poisson())
null = glm(counts ~ 1, data = D, family = poisson())
b = anova(null, full, test = 'Rao')
# Note: glm can also do the dummy coding for you:
c = glm(counts ~ mood, data = D, family = poisson())
# Built-in test
a = chisq.test(D$counts)
a
# As log-linear model, comparing to an intercept-only model
full = glm(counts ~ 1 + mood_happy + mood_sad, data = D, family = poisson())
full
summary(full)
a
null = glm(counts ~ 1, data = D, family = poisson())
b = anova(null, full, test = 'Rao')
b
# Note: glm can also do the dummy coding for you:
c = glm(counts ~ mood, data = D, family = poisson())
c
summary(c)
a
?HairEyeColor
mosaic(x)
x <- HairEyeColor[, , "Male"]
mosaic(x)
library(vcd)
mosaic(x)
x
chisq.test(x)
chi.res <- chisq.test(x)
with sum(((x - chi.res$expected) ^ 2)/chi.res$expected)
sum(((x - chi.res$expected) ^ 2)/chi.res$expected)
chi.res
x <- HairEyeColor[, , "Male"]
chi.res <- chisq.test(x)
sum(((x - chi.res$expected) ^ 2)/chi.res$expected)
mosaic(x, shade = TRUE, legend = TRUE)
chi.res$residuals
full = glm(Freq ~ mood * sex, family = poisson(), data = D)
# Contingency data in long format for linear model
D = data.frame(
mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
sex = c('male', 'female', 'male', 'female', 'male', 'female'),
Freq = c(100, 70, 30, 32, 110, 120)
)
# ... and as table for chisq.test
D_table = D %>%
spread(key = mood, value = Freq) %>%  # Mood to columns
select(-sex) %>%  # Remove sex column
as.matrix()
library(dplyr)
# Contingency data in long format for linear model
D = data.frame(
mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
sex = c('male', 'female', 'male', 'female', 'male', 'female'),
Freq = c(100, 70, 30, 32, 110, 120)
)
# ... and as table for chisq.test
D_table = D %>%
spread(key = mood, value = Freq) %>%  # Mood to columns
select(-sex) %>%  # Remove sex column
as.matrix()
# Contingency data in long format for linear model
D = data.frame(
mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
sex = c('male', 'female', 'male', 'female', 'male', 'female'),
Freq = c(100, 70, 30, 32, 110, 120)
)
# ... and as table for chisq.test
D_table = D %>%
spread(key = mood, value = Freq) %>%  # Mood to columns
select(-sex) %>%  # Remove sex column
as.matrix()
?spread
library(tidyverse)
# Contingency data in long format for linear model
D = data.frame(
mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
sex = c('male', 'female', 'male', 'female', 'male', 'female'),
Freq = c(100, 70, 30, 32, 110, 120)
)
# ... and as table for chisq.test
D_table = D %>%
spread(key = mood, value = Freq) %>%  # Mood to columns
select(-sex) %>%  # Remove sex column
as.matrix()
# Dummy coding of D for linear model (skipping mood=="sad" and gender=="female")
# We could also use model.matrix(D$Freq~D$mood*D$sex)
D$mood_happy = ifelse(D$mood == 'happy', 1, 0)
D$mood_meh = ifelse(D$mood == 'meh', 1, 0)
D$sex_male = ifelse(D$sex == 'male', 1, 0)
D
full = glm(Freq ~ mood * sex, family = poisson(), data = D)
c = anova(full, test = 'Rao')
full
c
MASS::loglm(Freq ~ mood + sex, D)
summary(fulk)
summary(full)
D = data.frame(mood = c('happy', 'sad', 'meh'),
counts = c(60, 90, 70))
# Dummy coding for the linear model
D$mood_happy = ifelse(D$mood == 'happy', 1, 0)
D$mood_sad = ifelse(D$mood == 'sad', 1, 0)
# Built-in test
a = chisq.test(D$counts)
# As log-linear model, comparing to an intercept-only model
full = glm(counts ~ 1 + mood_happy + mood_sad, data = D, family = poisson())
null = glm(counts ~ 1, data = D, family = poisson())
b = anova(null, full, test = 'Rao')
a
b
b
D = data.frame(
mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
sex = c('male', 'female', 'male', 'female', 'male', 'female'),
Freq = c(100, 70, 30, 32, 110, 120)
)
# ... and as table for chisq.test
D_table = D %>%
spread(key = mood, value = Freq) %>%  # Mood to columns
select(-sex) %>%  # Remove sex column
as.matrix()
# Dummy coding of D for linear model (skipping mood=="sad" and gender=="female")
# We could also use model.matrix(D$Freq~D$mood*D$sex)
D$mood_happy = ifelse(D$mood == 'happy', 1, 0)
D$mood_meh = ifelse(D$mood == 'meh', 1, 0)
D$sex_male = ifelse(D$sex == 'male', 1, 0)
a = chisq.test(D_table)
a
full = glm(Freq ~ 1 + mood_happy + mood_meh + sex_male + mood_happy*sex_male + mood_meh*sex_male, data = D, family = poisson())
null = glm(Freq ~ 1 + mood_happy + mood_meh + sex_male, data = D, family = poisson())
b = anova(null, full, test = 'Rao')  # Could also use test='LRT' or test='Chisq'
x
x1 <- data.frame(Freq = c(x), hair_color = rep(rownames(x), times = nrow(x)), eye_color = rep(colnames(x), each = ncol(x)))
x1
glm.res <- glm(Freq ~ hair_color * eye_color, data = x1, family=poisson)
glm.res
anova(glm.pois, test = "Rao")
glm.pois <- glm(Freq ~ hair_color * eye_color, data = x1, family=poisson)
anova(glm.pois, test = "Rao")
chisq.test(x)
fem <- HairEyeColor[, , "Female"]
chisq.test(fem)
mosaic(fem, shade = TRUE, legend = TRUE)
